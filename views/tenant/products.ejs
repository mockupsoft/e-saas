<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof tenantName !== 'undefined' ? tenantName : 'Tenant' %> - Ürün Yönetimi</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="/css/components.css">
    <link rel="stylesheet" href="/css/date-range-fix.css">
    <script src="https://unpkg.com/htmx.org@1.9.12"></script>
</head>
<body class="tenant">
    <div class="dashboard-layout">
        <%- include('../partials/tenant-navigation', { activePage: 'products' }) %>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Top Bar -->
            <header class="top-bar">
                <h1 class="page-title">📦 Ürün Yönetimi</h1>
                <div class="top-bar-actions">
                    <button class="mobile-menu-btn">☰</button>
                    <button class="btn btn-primary" onclick="openModal('createProductModal')">
                        ➕ Yeni Ürün
                    </button>
                </div>
            </header>

            <!-- Content -->
            <div class="content">
                <!-- Filter Bar -->
                <%
                // Tenant değişkenlerini güvenli şekilde kullan
                const safeTenantName = typeof tenantName !== 'undefined' ? tenantName : 'tenant';
                const safeTenantDomain = typeof tenantDomain !== 'undefined' ? tenantDomain : 'tenant';
                const productsFilterHxGet = '/' + safeTenantDomain + '/api/products';
                %>
                <%- include('../partials/components/filter-bar', {
                    id: 'productsFilter',
                    fields: [
                        {
                            type: 'text',
                            name: 'q',
                            label: 'Ara (Ad, SKU, Açıklama)',
                            placeholder: 'Ara...',
                            value: ''
                        },
                        {
                            type: 'select',
                            name: 'status',
                            label: 'Durum',
                            placeholder: 'Tümü',
                            options: [
                                { value: '', text: 'Tümü' },
                                { value: 'active', text: 'Aktif' },
                                { value: 'inactive', text: 'Pasif' }
                            ],
                            value: ''
                        },
                        {
                            type: 'date-range',
                            name: 'created',
                            label: 'Oluşturulma Tarihi'
                        }
                    ],
                    hxGet: productsFilterHxGet,
                    hxTarget: '#productsTableWrapper'
                }) %>

                <!-- Products Table -->
                <%
                const productsTableLoadUrl = '/' + safeTenantDomain + '/api/products';
                %>
                <%- include('../partials/components/table', {
                    id: 'productsTable',
                    headers: [
                        { text: 'Ad', key: 'name', sortable: true },
                        { text: 'Fiyat', key: 'price', sortable: true, renderKey: '_price' },
                        { text: 'Stok', key: 'stock_quantity', sortable: true },
                        { text: 'Durum', key: 'status', renderKey: '_status' }
                    ],
                    actions: [
                        { icon: '✏️', text: 'Düzenle', action: 'edit-product', class: 'btn-outline' },
                        { icon: '🗑️', text: 'Sil', action: 'delete-product', class: 'btn-danger' }
                    ],
                    loadUrl: productsTableLoadUrl,
                    emptyMessage: 'Henüz ürün eklenmemiş',
                    searchable: false,
                    sortable: true,
                    searchable: true,
                    paginated: true
                }) %>
            </div>
        </main>
    </div>

    <!-- Create Product Modal -->
    <div class="modal" id="createProductModal">
        <div class="modal-backdrop" onclick="closeModal('createProductModal')"></div>
        <div class="modal-content modal-md">
            <div class="modal-header">
                <h3 class="modal-title">Yeni Ürün Oluştur</h3>
                <button class="modal-close" onclick="closeModal('createProductModal')">✕</button>
            </div>
            <%
            const createProductUrl = '/' + tenantDomain + '/api/products';
            %>
            <form id="createProductModalForm" 
                  hx-post="<%= createProductUrl %>" 
                  hx-swap="none"
                  hx-indicator="#createProductModalLoading">
                <div class="modal-body">
                    <div class="modal-content-wrapper" id="createProductModalContent">
                        <%- include('../partials/components/form-group', {
                            type: 'text',
                            name: 'name',
                            label: 'Ürün Adı',
                            required: true,
                            placeholder: 'Ürün adını girin'
                        }) %>
                        <%- include('../partials/components/form-group', {
                            type: 'text',
                            name: 'sku',
                            label: 'SKU',
                            placeholder: 'Ürün SKU kodu'
                        }) %>
                        <%- include('../partials/components/form-group', {
                            type: 'textarea',
                            name: 'description',
                            label: 'Açıklama',
                            placeholder: 'Ürün açıklaması'
                        }) %>
                        <%- include('../partials/components/form-group', {
                            type: 'number',
                            name: 'price',
                            label: 'Fiyat (₺)',
                            required: true,
                            placeholder: '0.00',
                            attributes: { step: '0.01', min: '0' }
                        }) %>
                        <%- include('../partials/components/form-group', {
                            type: 'number',
                            name: 'stock_quantity',
                            label: 'Stok Miktarı',
                            placeholder: '0',
                            attributes: { min: '0' }
                        }) %>
                        <%- include('../partials/components/form-group', {
                            type: 'select',
                            name: 'status',
                            label: 'Durum',
                            options: [
                                { value: 'active', text: 'Aktif', selected: true },
                                { value: 'inactive', text: 'Pasif' }
                            ]
                        }) %>
                    </div>
                    <div id="createProductModalLoading" class="htmx-indicator modal-loading">
                        <div class="spinner"></div>
                        <p>İşleniyor...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline" onclick="closeModal('createProductModal')">İptal</button>
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div id="editProductModal" class="modal">
        <div class="modal-backdrop" onclick="closeModal('editProductModal')"></div>
        <div class="modal-content modal-md">
            <div class="modal-header">
                <h3 class="modal-title">Ürün Düzenle</h3>
                <button class="modal-close" onclick="closeModal('editProductModal')">✕</button>
            </div>
            <form id="editProductForm" 
                  hx-put="/api/products/:id" 
                  hx-target="#productsTableWrapper"
                  hx-swap="outerHTML"
                  hx-indicator="#editProductLoading">
                <div class="modal-body">
                    <div id="editProductContent">
                        <!-- Content will be loaded dynamically -->
                    </div>
                    <div id="editProductLoading" class="htmx-indicator modal-loading">
                        <div class="spinner"></div>
                        <p>Yükleniyor...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline" onclick="closeModal('editProductModal')">İptal</button>
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteProductModal" class="modal">
        <div class="modal-backdrop" onclick="closeModal('deleteProductModal')"></div>
        <div class="modal-content modal-sm">
            <div class="modal-header">
                <h3 class="modal-title">Ürünü Sil</h3>
                <button class="modal-close" onclick="closeModal('deleteProductModal')">✕</button>
            </div>
            <%
            const deleteProductBaseUrl = '/' + tenantDomain + '/api/products';
            %>
            <form id="deleteProductForm" 
                  hx-delete="<%= deleteProductBaseUrl %>/:id" 
                  hx-target="#productsTableWrapper"
                  hx-swap="outerHTML">
                <div class="modal-body">
                    <p>Bu ürünü silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline" onclick="closeModal('deleteProductModal')">İptal</button>
                    <button type="submit" class="btn btn-danger">Evet, Sil</button>
                </div>
            </form>
        </div>
    </div>

    <script src="/js/dashboard.js"></script>
    <script src="/js/ui.js"></script>
    <script src="/js/toast.js"></script>
    <script src="/js/table-force-reload.js"></script>
    <script src="/js/modal-fix.js"></script>
    <link rel="stylesheet" href="/css/modal-force-fix.css">
    <link rel="stylesheet" href="/css/toast.css">
    <script>
        // Product management functions
        window.editProduct = async function(productId) {
            try {
                const response = await fetch(`/<%= tenantDomain %>/api/products/${productId}`);
                const result = await response.json();
                
                if (result.success && result.data.product) {
                    const product = result.data.product;
                    const editForm = document.getElementById('editProductForm');
                    const editContent = document.getElementById('editProductContent');
                    
                    editForm.setAttribute('hx-put', `/${tenantDomainValue}/api/products/${productId}`);
                    
                    // Escape HTML for safe insertion
                    const escapeHtml = (text) => {
                        if (!text) return '';
                        const div = document.createElement('div');
                        div.textContent = text;
                        return div.innerHTML;
                    };
                    
                    editContent.innerHTML = 
                        '<div class="form-group">' +
                        '<label class="form-label" for="edit_name">Ürün Adı <span class="required">*</span></label>' +
                        '<input class="form-input" type="text" name="name" id="edit_name" value="' + escapeHtml(product.name || '') + '" required placeholder="Ürün adını girin">' +
                        '</div>' +
                        '<div class="form-group">' +
                        '<label class="form-label" for="edit_sku">SKU</label>' +
                        '<input class="form-input" type="text" name="sku" id="edit_sku" value="' + escapeHtml(product.sku || '') + '" placeholder="Ürün SKU kodu">' +
                        '</div>' +
                        '<div class="form-group">' +
                        '<label class="form-label" for="edit_description">Açıklama</label>' +
                        '<textarea class="form-textarea" name="description" id="edit_description" placeholder="Ürün açıklaması">' + escapeHtml(product.description || '') + '</textarea>' +
                        '</div>' +
                        '<div class="form-group">' +
                        '<label class="form-label" for="edit_price">Fiyat (₺) <span class="required">*</span></label>' +
                        '<input class="form-input" type="number" name="price" id="edit_price" value="' + (product.price || 0) + '" required placeholder="0.00" step="0.01" min="0">' +
                        '</div>' +
                        '<div class="form-group">' +
                        '<label class="form-label" for="edit_stock_quantity">Stok Miktarı</label>' +
                        '<input class="form-input" type="number" name="stock_quantity" id="edit_stock_quantity" value="' + (product.stock_quantity || 0) + '" placeholder="0" min="0">' +
                        '</div>' +
                        '<div class="form-group">' +
                        '<label class="form-label" for="edit_status">Durum</label>' +
                        '<select class="form-select" name="status" id="edit_status">' +
                        '<option value="active"' + (product.status === 'active' ? ' selected' : '') + '>Aktif</option>' +
                        '<option value="inactive"' + (product.status === 'inactive' ? ' selected' : '') + '>Pasif</option>' +
                        '</select>' +
                        '</div>';
                    
                    openModal('editProductModal');
                } else {
                    showToast('Ürün bilgileri alınamadı', 'error');
                }
            } catch (error) {
                console.error('Edit product error:', error);
                showToast('Bağlantı hatası', 'error');
            }
        };

        window.deleteProduct = function(productId) {
            const deleteForm = document.getElementById('deleteProductForm');
            deleteForm.setAttribute('hx-delete', `/${tenantDomainValue}/api/products/${productId}`);
            openModal('deleteProductModal');
        };

        // HTMX event listeners
        document.body.addEventListener('htmx:afterRequest', function(event) {
            if (event.detail.target.id === 'productsTableWrapper' || 
                event.detail.target.closest('#productsTableWrapper')) {
                closeModal('createProductModal');
                closeModal('editProductModal');
                closeModal('deleteProductModal');
                
                // Check if response is JSON or HTML
                const responseText = event.detail.xhr.response || '';
                if (responseText.startsWith('{') && responseText.endsWith('}')) {
                    try {
                        const response = JSON.parse(responseText);
                        if (response.success) {
                            showToast(response.message || 'İşlem başarılı', 'success');
                        }
                    } catch (e) {
                        // Ignore JSON parse errors for HTML responses
                    }
                }
            }
        });
    </script>
</body>
</html>
