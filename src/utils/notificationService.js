const Notification = require('../models/Notification');

/**
 * Notification Service - Sistem otomatik bildirimleri
 */
class NotificationService {
    
    /**
     * Sipari≈ü olu≈üturuldu bildirimi
     */
    static async notifyOrderCreated(tenantDbName, tenantId, orderId, orderData) {
        try {
            const title = 'Yeni Sipari≈ü Alƒ±ndƒ±';
            const message = `${orderData.customer_name} tarafƒ±ndan ${orderData.total_amount} TL tutarƒ±nda yeni bir sipari≈ü olu≈üturuldu. Sipari≈ü ID: #${orderId}`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null, // Genel bildirim (t√ºm kullanƒ±cƒ±lar g√∂rebilir)
                title: title,
                message: message,
                type: 'success'
            });
            
            console.log(`üì¨ Sipari≈ü bildirimi olu≈üturuldu: Order #${orderId}`);
        } catch (error) {
            console.error('Sipari≈ü bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * √úr√ºn stoƒüu kritik seviyede bildirimi
     */
    static async notifyLowStock(tenantDbName, tenantId, productData) {
        try {
            const title = 'Stok Kritik Seviyede';
            const message = `"${productData.name}" √ºr√ºn√ºn√ºn stoƒüu kritik seviyede! Mevcut stok: ${productData.stock_quantity} adet. Stok yenilenmesi gerekebilir.`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: 'warning'
            });
            
            console.log(`üì¨ Stok bildirimi olu≈üturuldu: ${productData.name}`);
        } catch (error) {
            console.error('Stok bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Kupon s√ºresi bitiyor bildirimi
     */
    static async notifyExpiringCoupon(tenantDbName, tenantId, couponData, daysLeft) {
        try {
            const title = 'Kupon S√ºresi Dolmak √úzere';
            const message = `"${couponData.code}" kuponunun s√ºresi ${daysLeft} g√ºn i√ßinde sona erecek. Kupon t√ºr√º: ${couponData.type}, ƒ∞ndirim: ${couponData.amount}${couponData.type === 'percentage' ? '%' : ' TL'}`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: 'warning'
            });
            
            console.log(`üì¨ Kupon bildirimi olu≈üturuldu: ${couponData.code}`);
        } catch (error) {
            console.error('Kupon bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Yeni personel eklendi bildirimi
     */
    static async notifyStaffAdded(tenantDbName, tenantId, staffData) {
        try {
            const title = 'Yeni Personel Eklendi';
            const message = `${staffData.name} (${staffData.email}) panelinize ${staffData.role} yetkisiyle eri≈üebilir duruma getirildi.`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: 'info'
            });
            
            console.log(`üì¨ Personel bildirimi olu≈üturuldu: ${staffData.name}`);
        } catch (error) {
            console.error('Personel bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Ba≈üarƒ±lƒ± oturum a√ßma bildirimi
     */
    static async notifySuccessfulLogin(tenantDbName, tenantId, userEmail, ipAddress, userAgent) {
        try {
            const title = 'Sisteme Giri≈ü Yapƒ±ldƒ±';
            const now = new Date().toLocaleString('tr-TR');
            const message = `${userEmail} kullanƒ±cƒ±sƒ± ${now} tarihinde sisteme giri≈ü yaptƒ±. IP: ${ipAddress}`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: 'info'
            });
            
            console.log(`üì¨ Giri≈ü bildirimi olu≈üturuldu: ${userEmail}`);
        } catch (error) {
            console.error('Giri≈ü bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Sipari≈ü durumu deƒüi≈üti bildirimi
     */
    static async notifyOrderStatusChanged(tenantDbName, tenantId, orderId, oldStatus, newStatus, customerName) {
        try {
            const statusMap = {
                'pending': 'Beklemede',
                'processing': 'ƒ∞≈üleniyor',
                'shipped': 'Kargoya Verildi',
                'delivered': 'Teslim Edildi',
                'cancelled': 'ƒ∞ptal Edildi'
            };

            const title = 'Sipari≈ü Durumu G√ºncellendi';
            const message = `#${orderId} numaralƒ± sipari≈ü (${customerName}) durumu "${statusMap[oldStatus] || oldStatus}" den "${statusMap[newStatus] || newStatus}" olarak g√ºncellendi.`;
            
            const type = newStatus === 'delivered' ? 'success' : 
                        newStatus === 'cancelled' ? 'danger' : 'info';
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: type
            });
            
            console.log(`üì¨ Sipari≈ü durum bildirimi olu≈üturuldu: Order #${orderId}`);
        } catch (error) {
            console.error('Sipari≈ü durum bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Yeni m√º≈üteri kaydƒ± bildirimi
     */
    static async notifyNewCustomer(tenantDbName, tenantId, customerData) {
        try {
            const title = 'Yeni M√º≈üteri Kaydƒ±';
            const message = `${customerData.name} (${customerData.email}) sisteme yeni m√º≈üteri olarak eklendi. ≈ûehir: ${customerData.city || 'Belirtilmemi≈ü'}`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: 'success'
            });
            
            console.log(`üì¨ Yeni m√º≈üteri bildirimi olu≈üturuldu: ${customerData.name}`);
        } catch (error) {
            console.error('Yeni m√º≈üteri bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Affiliate satƒ±≈ü bildirimi
     */
    static async notifyAffiliateSale(tenantDbName, tenantId, affiliateData, orderData, commissionAmount) {
        try {
            const title = 'Affiliate Satƒ±≈ü Ger√ßekle≈üti';
            const message = `${affiliateData.affiliate_code} affiliate kodu ile ${orderData.total_amount} TL tutarƒ±nda satƒ±≈ü ger√ßekle≈üti. Komisyon: ${commissionAmount} TL`;
            
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: null,
                title: title,
                message: message,
                type: 'success'
            });
            
            console.log(`üì¨ Affiliate satƒ±≈ü bildirimi olu≈üturuldu: ${affiliateData.affiliate_code}`);
        } catch (error) {
            console.error('Affiliate satƒ±≈ü bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Genel sistem bildirimi (manuel)
     */
    static async notifySystemMessage(tenantDbName, tenantId, title, message, type = 'info', userId = null) {
        try {
            await Notification.createNotification(tenantDbName, {
                tenant_id: tenantId,
                user_id: userId,
                title: title,
                message: message,
                type: type
            });
            
            console.log(`üì¨ Sistem bildirimi olu≈üturuldu: ${title}`);
        } catch (error) {
            console.error('Sistem bildirimi olu≈üturma hatasƒ±:', error.message);
        }
    }

    /**
     * Toplu bildirim temizleme (eski bildirimleri sil)
     */
    static async cleanupOldNotifications(tenantDbName, daysOld = 30) {
        try {
            const deletedCount = await Notification.deleteOldNotifications(tenantDbName, daysOld);
            
            if (deletedCount > 0) {
                console.log(`üßπ ${deletedCount} adet eski bildirim temizlendi (${daysOld} g√ºnden eski)`);
            }
            
            return deletedCount;
        } catch (error) {
            console.error('Bildirim temizleme hatasƒ±:', error.message);
            return 0;
        }
    }

    /**
     * Stok kontrol√º i√ßin otomatik tarama (g√ºnl√ºk cron job i√ßin)
     */
    static async checkLowStockProducts(tenantDbName, tenantId, threshold = 10) {
        try {
            const { executeTenantQuery } = require('./db');
            
            const lowStockProducts = await executeTenantQuery(
                tenantDbName,
                'SELECT id, name, stock_quantity FROM products WHERE stock_quantity <= ? AND status = "active"',
                [threshold]
            );

            for (const product of lowStockProducts) {
                await this.notifyLowStock(tenantDbName, tenantId, product);
            }

            if (lowStockProducts.length > 0) {
                console.log(`üìä ${lowStockProducts.length} √ºr√ºn i√ßin d√º≈ü√ºk stok bildirimi olu≈üturuldu`);
            }

            return lowStockProducts.length;
        } catch (error) {
            console.error('Stok kontrol√º hatasƒ±:', error.message);
            return 0;
        }
    }

    /**
     * S√ºresi dolmak √ºzere olan kuponlarƒ± kontrol et
     */
    static async checkExpiringCoupons(tenantDbName, tenantId, daysAhead = 2) {
        try {
            const { executeTenantQuery } = require('./db');
            
            const expiringCoupons = await executeTenantQuery(
                tenantDbName,
                'SELECT * FROM coupons WHERE expires_at <= DATE_ADD(NOW(), INTERVAL ? DAY) AND expires_at > NOW() AND status = "active"',
                [daysAhead]
            );

            for (const coupon of expiringCoupons) {
                const daysLeft = Math.ceil((new Date(coupon.expires_at) - new Date()) / (1000 * 60 * 60 * 24));
                await this.notifyExpiringCoupon(tenantDbName, tenantId, coupon, daysLeft);
            }

            if (expiringCoupons.length > 0) {
                console.log(`üìä ${expiringCoupons.length} kupon i√ßin s√ºresi dolma bildirimi olu≈üturuldu`);
            }

            return expiringCoupons.length;
        } catch (error) {
            console.error('Kupon kontrol√º hatasƒ±:', error.message);
            return 0;
        }
    }
}

module.exports = NotificationService; 